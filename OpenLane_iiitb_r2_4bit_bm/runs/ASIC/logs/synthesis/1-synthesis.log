
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.12+45 (git sha1 UNKNOWN, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v
Parsing SystemVerilog input from `/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v' to AST representation.
Generating RTLIL representation for module `\iiitb_r2_4bit_bm'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/iiitb_r2_4bit_bm/runs/ASIC/tmp/synthesis/hierarchy.dot'.
Dumping module iiitb_r2_4bit_bm to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \iiitb_r2_4bit_bm

3.2. Analyzing design hierarchy..
Top module:  \iiitb_r2_4bit_bm
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \iiitb_r2_4bit_bm

5.1.2. Analyzing design hierarchy..
Top module:  \iiitb_r2_4bit_bm
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1 in module iiitb_r2_4bit_bm.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 11 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:20$26'.
  Set init value: \Count = 3'100
Found init rule in `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:19$25'.
  Set init value: \M_temp = 4'0000
Found init rule in `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:18$24'.
  Set init value: \Q_temp = 4'0000
Found init rule in `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:17$23'.
  Set init value: \Q_minus_one = 1'0
Found init rule in `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:16$22'.
  Set init value: \A = 4'0000

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:20$26'.
Creating decoders for process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:19$25'.
Creating decoders for process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:18$24'.
Creating decoders for process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:17$23'.
Creating decoders for process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:16$22'.
Creating decoders for process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1'.
     1/23: $5\Count[2:0]
     2/23: $5\A[3:0]
     3/23: $5\Q_temp[3:0]
     4/23: $5\Q_minus_one[0:0]
     5/23: $4\Count[2:0]
     6/23: $4\A[3:0]
     7/23: $4\Q_temp[3:0]
     8/23: $4\Q_minus_one[0:0]
     9/23: $3\Count[2:0]
    10/23: $3\A[3:0]
    11/23: $3\Q_temp[3:0]
    12/23: $3\Q_minus_one[0:0]
    13/23: $2\M_temp[3:0]
    14/23: $2\Q_temp[3:0]
    15/23: $2\Count[2:0]
    16/23: $2\Q_minus_one[0:0]
    17/23: $2\A[3:0]
    18/23: $1\Count[2:0]
    19/23: $1\M_temp[3:0]
    20/23: $1\Q_temp[3:0]
    21/23: $1\P[7:0]
    22/23: $1\Q_minus_one[0:0]
    23/23: $1\A[3:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\iiitb_r2_4bit_bm.\A' using process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1'.
  created $dff cell `$procdff$219' with positive edge clock.
Creating register for signal `\iiitb_r2_4bit_bm.\P' using process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1'.
  created $dff cell `$procdff$220' with positive edge clock.
Creating register for signal `\iiitb_r2_4bit_bm.\Q_minus_one' using process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1'.
  created $dff cell `$procdff$221' with positive edge clock.
Creating register for signal `\iiitb_r2_4bit_bm.\Q_temp' using process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1'.
  created $dff cell `$procdff$222' with positive edge clock.
Creating register for signal `\iiitb_r2_4bit_bm.\M_temp' using process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1'.
  created $dff cell `$procdff$223' with positive edge clock.
Creating register for signal `\iiitb_r2_4bit_bm.\Count' using process `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1'.
  created $dff cell `$procdff$224' with positive edge clock.

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:20$26'.
Removing empty process `iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:19$25'.
Removing empty process `iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:18$24'.
Removing empty process `iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:17$23'.
Removing empty process `iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:16$22'.
Found and cleaned up 5 empty switches in `\iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1'.
Removing empty process `iiitb_r2_4bit_bm.$proc$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:24$1'.
Cleaned up 5 empty switches.

5.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.
<suppressed ~6 debug messages>

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..
Removed 1 unused cells and 103 unused wires.
<suppressed ~2 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module iiitb_r2_4bit_bm...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_r2_4bit_bm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$103.
    dead port 1/2 on $mux $procmux$106.
    dead port 1/2 on $mux $procmux$109.
    dead port 1/2 on $mux $procmux$115.
    dead port 1/2 on $mux $procmux$118.
    dead port 1/2 on $mux $procmux$121.
    dead port 1/2 on $mux $procmux$127.
    dead port 1/2 on $mux $procmux$130.
    dead port 1/2 on $mux $procmux$133.
    dead port 1/2 on $mux $procmux$139.
    dead port 1/2 on $mux $procmux$142.
    dead port 1/2 on $mux $procmux$148.
    dead port 1/2 on $mux $procmux$151.
    dead port 1/2 on $mux $procmux$157.
    dead port 1/2 on $mux $procmux$160.
    dead port 1/2 on $mux $procmux$166.
    dead port 1/2 on $mux $procmux$169.
    dead port 1/2 on $mux $procmux$175.
    dead port 1/2 on $mux $procmux$181.
    dead port 1/2 on $mux $procmux$187.
    dead port 1/2 on $mux $procmux$193.
    dead port 1/2 on $mux $procmux$199.
    dead port 1/2 on $mux $procmux$31.
    dead port 1/2 on $mux $procmux$34.
    dead port 1/2 on $mux $procmux$37.
    dead port 1/2 on $mux $procmux$40.
    dead port 1/2 on $mux $procmux$46.
    dead port 1/2 on $mux $procmux$49.
    dead port 1/2 on $mux $procmux$52.
    dead port 1/2 on $mux $procmux$55.
    dead port 1/2 on $mux $procmux$61.
    dead port 1/2 on $mux $procmux$64.
    dead port 1/2 on $mux $procmux$67.
    dead port 1/2 on $mux $procmux$70.
    dead port 1/2 on $mux $procmux$76.
    dead port 1/2 on $mux $procmux$79.
    dead port 1/2 on $mux $procmux$82.
    dead port 1/2 on $mux $procmux$85.
    dead port 1/2 on $mux $procmux$91.
    dead port 1/2 on $mux $procmux$94.
    dead port 1/2 on $mux $procmux$97.
Removed 41 multiplexer ports.
<suppressed ~5 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_r2_4bit_bm.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..
Removed 0 unused cells and 45 unused wires.
<suppressed ~1 debug messages>

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_r2_4bit_bm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_r2_4bit_bm.
Performed a total of 0 changes.

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.7.16. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_r2_4bit_bm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_r2_4bit_bm.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$224 ($dff) from module iiitb_r2_4bit_bm (D = $2\Count[2:0], Q = \Count, rval = 3'100).
Adding EN signal on $auto$ff.cc:262:slice$225 ($sdff) from module iiitb_r2_4bit_bm (D = $3\Count[2:0], Q = \Count).
Adding SRST signal on $procdff$223 ($dff) from module iiitb_r2_4bit_bm (D = $2\M_temp[3:0], Q = \M_temp, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$227 ($sdff) from module iiitb_r2_4bit_bm (D = \M, Q = \M_temp).
Adding SRST signal on $procdff$221 ($dff) from module iiitb_r2_4bit_bm (D = $2\Q_minus_one[0:0], Q = \Q_minus_one, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$229 ($sdff) from module iiitb_r2_4bit_bm (D = $3\Q_minus_one[0:0], Q = \Q_minus_one).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.
<suppressed ~1 debug messages>

5.9.9. Rerunning OPT passes. (Maybe there is more to do..)

5.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_r2_4bit_bm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

5.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_r2_4bit_bm.
Performed a total of 0 changes.

5.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.9.13. Executing OPT_DFF pass (perform DFF optimizations).

5.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

5.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.9.16. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell iiitb_r2_4bit_bm.$gt$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:43$5 ($gt).
Removed cell iiitb_r2_4bit_bm.$procmux$73 ($mux).
Removed cell iiitb_r2_4bit_bm.$procmux$124 ($mux).
Removed cell iiitb_r2_4bit_bm.$procmux$163 ($mux).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module iiitb_r2_4bit_bm:
  creating $macc model for $add$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:52$13 ($add).
  creating $macc model for $sub$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:48$7 ($sub).
  creating $macc model for $sub$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:60$20 ($sub).
  creating $alu model for $macc $sub$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:60$20.
  creating $alu model for $macc $sub$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:48$7.
  creating $alu model for $macc $add$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:52$13.
  creating $alu model for $gt$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:43$5 ($gt): new $alu
  creating $alu cell for $gt$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:43$5: $auto$alumacc.cc:485:replace_alu$238
  creating $alu cell for $add$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:52$13: $auto$alumacc.cc:485:replace_alu$243
  creating $alu cell for $sub$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:48$7: $auto$alumacc.cc:485:replace_alu$246
  creating $alu cell for $sub$/openlane/designs/iiitb_r2_4bit_bm/src/iiitb_r2_4bit_bm.v:60$20: $auto$alumacc.cc:485:replace_alu$249
  created 4 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_r2_4bit_bm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_r2_4bit_bm.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.15.9. Rerunning OPT passes. (Maybe there is more to do..)

5.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_r2_4bit_bm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_r2_4bit_bm.
Performed a total of 0 changes.

5.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.15.13. Executing OPT_DFF pass (perform DFF optimizations).

5.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

5.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.15.16. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.16.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

5.16.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.16.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

5.16.9. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_r2_4bit_bm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_r2_4bit_bm.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~434 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.
<suppressed ~47 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..
Removed 20 unused cells and 122 unused wires.
<suppressed ~21 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\iiitb_r2_4bit_bm' to `<abc-temp-dir>/input.blif'..
Extracted 106 gates and 129 wires to a netlist network with 22 inputs and 12 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       26
ABC RESULTS:               MUX cells:       38
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:       18
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:       95
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       12
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.
<suppressed ~3 debug messages>

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..
Removed 1 unused cells and 78 unused wires.
<suppressed ~2 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \iiitb_r2_4bit_bm

5.25.2. Analyzing design hierarchy..
Top module:  \iiitb_r2_4bit_bm
Removed 0 unused modules.

5.26. Printing statistics.

=== iiitb_r2_4bit_bm ===

   Number of wires:                109
   Number of wire bits:            145
   Number of public wires:          11
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                130
     $_ANDNOT_                      26
     $_AND_                          1
     $_DFF_P_                       16
     $_MUX_                         38
     $_NAND_                         3
     $_NOR_                          2
     $_NOT_                         17
     $_ORNOT_                        3
     $_OR_                           2
     $_SDFFE_PP0N_                   2
     $_SDFFE_PP0P_                   5
     $_SDFFE_PP1N_                   1
     $_XNOR_                         4
     $_XOR_                         10

5.27. Executing CHECK pass (checking for obvious problems).
Checking module iiitb_r2_4bit_bm...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/iiitb_r2_4bit_bm/runs/ASIC/tmp/synthesis/post_techmap.dot'.
Dumping module iiitb_r2_4bit_bm to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_r2_4bit_bm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_r2_4bit_bm.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_r2_4bit_bm'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_r2_4bit_bm.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..

10. Printing statistics.

=== iiitb_r2_4bit_bm ===

   Number of wires:                109
   Number of wire bits:            145
   Number of public wires:          11
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                130
     $_ANDNOT_                      26
     $_AND_                          1
     $_DFF_P_                       16
     $_MUX_                         38
     $_NAND_                         3
     $_NOR_                          2
     $_NOT_                         17
     $_ORNOT_                        3
     $_OR_                           2
     $_SDFFE_PP0N_                   2
     $_SDFFE_PP0P_                   5
     $_SDFFE_PP1N_                   1
     $_XNOR_                         4
     $_XOR_                         10

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/yashm98/openlane_dir/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/yashm98/openlane_dir/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /home/yashm98/openlane_dir/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/yashm98/openlane_dir/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

14. Executing SIMPLEMAP pass (map simple cells to gate primitives).

15. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

15.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\iiitb_r2_4bit_bm':
  mapped 24 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

16. Printing statistics.

=== iiitb_r2_4bit_bm ===

   Number of wires:                125
   Number of wire bits:            161
   Number of public wires:          11
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                146
     $_ANDNOT_                      26
     $_AND_                          1
     $_MUX_                         54
     $_NAND_                         3
     $_NOR_                          2
     $_NOT_                         17
     $_ORNOT_                        3
     $_OR_                           2
     $_XNOR_                         4
     $_XOR_                         10
     sky130_fd_sc_hd__dfxtp_2       24

[INFO]: USING STRATEGY AREA 0

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\iiitb_r2_4bit_bm' to `/tmp/yosys-abc-1IqxdL/input.blif'..
Extracted 122 gates and 150 wires to a netlist network with 26 inputs and 16 outputs.

17.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-1IqxdL/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-1IqxdL/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-1IqxdL/input.blif 
ABC: + read_lib -w /openlane/designs/iiitb_r2_4bit_bm/runs/ASIC/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/iiitb_r2_4bit_bm/runs/ASIC/tmp/synthesis/trimmed.lib" has 176 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.16 sec
ABC: Memory =    7.70 MB. Time =     0.16 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/iiitb_r2_4bit_bm/runs/ASIC/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/iiitb_r2_4bit_bm/runs/ASIC/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (1759.43 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     88 (  9.1 %)   Cap = 10.3 ff (  1.4 %)   Area =      731.95 ( 94.3 %)   Delay =  1764.21 ps  ( 18.2 %)               
ABC: Path  0 --       7 : 0    4 pi                       A =   0.00  Df =  31.9  -17.9 ps  S =  49.8 ps  Cin =  0.0 ff  Cout =   9.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      82 : 2    3 sky130_fd_sc_hd__and2b_2 A =   8.76  Df = 245.4  -30.3 ps  S =  48.8 ps  Cin =  1.6 ff  Cout =   5.7 ff  Cmax = 310.4 ff  G =  339  
ABC: Path  2 --      84 : 2    4 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 570.9 -222.0 ps  S =  81.0 ps  Cin =  1.5 ff  Cout =  12.4 ff  Cmax = 299.4 ff  G =  817  
ABC: Path  3 --      91 : 2    1 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 861.5 -315.0 ps  S =  49.0 ps  Cin =  1.5 ff  Cout =   1.5 ff  Cmax = 299.4 ff  G =  101  
ABC: Path  4 --      92 : 2    1 sky130_fd_sc_hd__and2_2  A =   7.51  Df =1042.9 -265.4 ps  S =  36.6 ps  Cin =  1.5 ff  Cout =   2.6 ff  Cmax = 303.0 ff  G =  164  
ABC: Path  5 --      94 : 3    1 sky130_fd_sc_hd__o21a_2  A =   8.76  Df =1222.3 -168.6 ps  S =  32.2 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 294.8 ff  G =   99  
ABC: Path  6 --      95 : 5    1 sky130_fd_sc_hd__a221o_2 A =  11.26  Df =1560.9 -384.2 ps  S =  50.6 ps  Cin =  2.3 ff  Cout =   2.4 ff  Cmax = 299.4 ff  G =  100  
ABC: Path  7 --      96 : 4    1 sky130_fd_sc_hd__o211a_2 A =  10.01  Df =1764.2 -299.9 ps  S = 204.2 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 268.3 ff  G = 1415  
ABC: Start-point = pi6 (\M_temp [2]).  End-point = po5 ($0\A[3:0] [1]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   26/   16  lat =    0  nd =    88  edge =    249  area =732.07  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-1IqxdL/output.blif 

17.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        2
ABC RESULTS:     sky130_vsdinv cells:        3
ABC RESULTS:        internal signals:      108
ABC RESULTS:           input signals:       26
ABC RESULTS:          output signals:       16
Removing temp directory.

18. Executing SETUNDEF pass (replace undef values with defined constants).

19. Executing HILOMAP pass (mapping to constant drivers).

20. Executing SPLITNETS pass (splitting up multi-bit signals).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_r2_4bit_bm..
Removed 0 unused cells and 152 unused wires.
<suppressed ~1 debug messages>

22. Executing INSBUF pass (insert buffer cells for connected wires).

23. Executing CHECK pass (checking for obvious problems).
Checking module iiitb_r2_4bit_bm...
Warning: Wire iiitb_r2_4bit_bm.\P [7] is used but has no driver.
Warning: Wire iiitb_r2_4bit_bm.\P [6] is used but has no driver.
Warning: Wire iiitb_r2_4bit_bm.\P [5] is used but has no driver.
Warning: Wire iiitb_r2_4bit_bm.\P [4] is used but has no driver.
Warning: Wire iiitb_r2_4bit_bm.\P [3] is used but has no driver.
Warning: Wire iiitb_r2_4bit_bm.\P [2] is used but has no driver.
Warning: Wire iiitb_r2_4bit_bm.\P [1] is used but has no driver.
Warning: Wire iiitb_r2_4bit_bm.\P [0] is used but has no driver.
Found and reported 8 problems.

24. Printing statistics.

=== iiitb_r2_4bit_bm ===

   Number of wires:                110
   Number of wire bits:            123
   Number of public wires:          22
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                112
     sky130_fd_sc_hd__a21o_2         6
     sky130_fd_sc_hd__a21oi_2        6
     sky130_fd_sc_hd__a221o_2        2
     sky130_fd_sc_hd__a22o_2         1
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a31o_2         3
     sky130_fd_sc_hd__and2_2         2
     sky130_fd_sc_hd__and2b_2        3
     sky130_fd_sc_hd__and3_2         2
     sky130_fd_sc_hd__buf_1          4
     sky130_fd_sc_hd__dfxtp_2       24
     sky130_fd_sc_hd__inv_2          1
     sky130_fd_sc_hd__mux2_2         3
     sky130_fd_sc_hd__nand2_2        7
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o211a_2       11
     sky130_fd_sc_hd__o21a_2         3
     sky130_fd_sc_hd__o21ai_2        1
     sky130_fd_sc_hd__o21ba_2        2
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__or2_2         11
     sky130_fd_sc_hd__or2b_2         1
     sky130_fd_sc_hd__or3_2          5
     sky130_fd_sc_hd__or3b_2         2
     sky130_fd_sc_hd__or4_2          1
     sky130_fd_sc_hd__xor2_2         2
     sky130_vsdinv                   3

   Chip area for module '\iiitb_r2_4bit_bm': 1242.441600

25. Executing Verilog backend.
Dumping module `\iiitb_r2_4bit_bm'.

Warnings: 8 unique messages, 8 total
End of script. Logfile hash: ac20a51e4e, CPU: user 1.49s system 0.10s, MEM: 28.07 MB peak
Yosys 0.12+45 (git sha1 UNKNOWN, gcc 8.3.1 -fPIC -Os)
Time spent: 30% 2x abc (0 sec), 22% 1x dfflibmap (0 sec), ...
